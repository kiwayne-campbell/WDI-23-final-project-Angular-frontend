{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/comment.js","js/controllers/comments.js","js/models/festival.js","js/controllers/festivals.js","js/directives/googleMap.js","js/controllers/main.js","js/router.js","js/controllers/searches.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","currentUserId","getPayload","id","console","log","localStorage","setItem","Comment","$resource","update","method","CommentsIndexController","commentsIndex","all","query","CommentsShowController","deleteComments","commentsShow","comment","$remove","get","params","delete","CommentsEditController","Comments","commentsEdit","$update","Festival","favorite","url","featured","isArray","FestivalsIndexController","$scope","festivalsIndex","q","FestivalsShowController","addComment","save","festivalsShow","reload","festival","$favorite","deleteFestival","festival_id","add","FestivalsEditController","festivalsEdit","googleMap","$window","restrict","replace","template","scope","center","link","element","google","map","maps","Map","zoom","Marker","position","animation","Animation","DROP","MainController","$rootScope","logout","removeItem","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","userId","$on","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","SearchesIndexController","Search","searchesIndex","SearchesShowController","searchesShow","search","User","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","parseFloat","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        const currentUserId = $auth.getPayload().id;\n        console.log(currentUserId);\n        localStorage.setItem('currentUserId', currentUserId);\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('CommentsIndexController', CommentsIndexController)\n  .controller('CommentsShowController', CommentsShowController)\n  .controller('CommentsEditController', CommentsEditController);\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n\n  commentsIndex.all = Comment.query();\n}\n\n// CommentsNewController.$inject = ['Comment', '$state', '$auth'];\n// function CommentsNewController(Comment, $state, $auth) {\n//   const commentsNew = this;\n//\n//\n//   function create() {\n//     Comment.save($state.params, () => {\n//       commentsNew.comment.userId = $auth.getPayload().id;\n//       commentsNew.comment.festivalId = festivalsShow.festival.id;\n//\n//       $state.go('commentsShow', $state.params);\n//     });\n//   }\n//\n//   commentsNew.create = create;\n// }\n\n\nCommentsShowController.$inject = ['Comment', '$state'];\nfunction CommentsShowController(Comment, $state) {\n  const commentsShow = this;\n\n  commentsShow.comment = Comment.get($state.params);\n\n  function deleteComments() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n\n  commentsShow.delete = deleteComments;\n}\n\n\nCommentsEditController.$inject = ['Comments', '$state'];\nfunction CommentsEditController(Comments, $state) {\n  const commentsEdit = this;\n\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('Festival', Festival);\n\nFestival.$inject = ['$resource', 'API_URL'];\nfunction Festival($resource, API_URL) {\n  return new $resource(`${API_URL}/festivals/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    favorite: { method: 'POST', url: `${API_URL}/festivals/:id/favorite` },\n    featured: { method: 'GET', url: `${API_URL}/festivals/featured`, isArray: true }\n  });\n}\n","angular.module('finalProject')\n  .controller('FestivalsIndexController', FestivalsIndexController)\n  .controller('FestivalsShowController', FestivalsShowController)\n  .controller('FestivalsEditController', FestivalsEditController);\n\nFestivalsIndexController.$inject = ['Festival', '$state', '$scope'];\nfunction FestivalsIndexController(Festival, $state, $scope) {\n  const festivalsIndex = this;\n  festivalsIndex.all = Festival.query({ q: $state.params.q });\n  festivalsIndex.featured = Festival.featured();\n\n}\n\nFestivalsShowController.$inject = ['Festival', '$state', 'Comment'];\nfunction FestivalsShowController(Festival, $state, Comment) {\n  const festivalsShow = this;\n\n  festivalsShow.festival = Festival.get($state.params);\n\n  festivalsShow.comment = {\n    festival_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(festivalsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  festivalsShow.add = addComment;\n\n\n  function favorite() {\n    festivalsShow.festival.$favorite(() => {\n      $state.go('festivalsIndex');\n    });\n  }\n  // add main-message- added to favourites!\n\n  festivalsShow.favorite = favorite;\n\n\n  function deleteFestival() {\n    festivalsShow.festival.$remove(() => {\n      $state.go('festivalsIndex');\n    });\n  }\n\n  festivalsShow.delete = deleteFestival;\n}\n\n\nFestivalsEditController.$inject = ['Festival', '$state'];\nfunction FestivalsEditController(Festival, $state) {\n  const festivalsEdit = this;\n\n  festivalsEdit.festival = Festival.get($state.params);\n\n  function update() {\n    festivalsEdit.festival.$update(() => {\n      $state.go('festivalsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      center: '='\n    },\n    link: function($scope, element) {\n      console.log($window.google);\n      console.log(element);\n      const map = new $window.google.maps.Map(element[0], {\n        center: $scope.center,\n        zoom: 14\n      });\n\n      new $window.google.maps.Marker({\n        position: $scope.center,\n        map: map,\n        animation: $window.google.maps.Animation.DROP\n      });\n\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  // $window.localStorage.setItem(currentUserId);\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.userId = $auth.getPayload().id;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        localStorage.removeItem('currentUserId');\n        $state.go('home');\n\n      });\n  }\n\n  main.logout = logout;\n\n  main.message = null;\n  const protectedStates = ['usersEdit', 'usersNew', 'usersShow'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('festivalsIndex', {\n      url: '/festivals?q',\n      templateUrl: '/templates/festivalsIndex.html',\n      controller: 'FestivalsIndexController as festivalsIndex'\n    })\n    .state('festivalsShow', {\n      url: '/festivals/:id',\n      templateUrl: '/templates/festivalsShow.html',\n      controller: 'FestivalsShowController as festivalsShow'\n    })\n    .state('festivalsEdit', {\n      url: '/festivals/:id/edit',\n      templateUrl: '/templates/festivalsEdit.html',\n      controller: 'FestivalsEditController as festivalsEdit'\n    })\n    .state('commentsIndex', {\n      url: '/comments',\n      templateUrl: '/templates/commentsIndex.html',\n      controller: 'CommentsIndexController as commentsIndex'\n    })\n    .state('commentsNew', {\n      url: '/comments/new',\n      templateUrl: '/templates/commentsNew.html',\n      controller: 'CommentsNewController as commentsNew'\n    })\n    .state('commentsShow', {\n      url: '/comments/:id',\n      templateUrl: '/templates/commentsShow.html',\n      controller: 'CommentsShowController as commentsShow'\n    })\n    .state('commentsEdit', {\n      url: '/comments/:id/edit',\n      templateUrl: '/templates/commentsEdit.html',\n      controller: 'CommentsEditController as commentsEdit'\n    })\n    .state('home', {\n      url: '/home',\n      templateUrl: '/templates/home.html',\n      controller: 'LoginController as login'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n\n  $urlRouterProvider.otherwise('/home');\n}\n","angular.module('finalProject')\n  .controller('SearchesIndexController', SearchesIndexController)\n  .controller('SearchesShowController', SearchesShowController);\n\n\nSearchesIndexController.$inject = ['Search'];\nfunction SearchesIndexController(Search) {\n  const searchesIndex = this;\n\n  searchesIndex.all = Search.query();\n}\n\nSearchesShowController.$inject = ['Search', '$state'];\nfunction SearchesShowController(Search, $state) {\n  const searchesShow = this;\n\n  searchesShow.search = Search.get($state.params);\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'Festival'];\nfunction UsersShowController(User, $state, $auth, Festival) {\n  const usersShow = this;\n\n  // const currentUserId = $auth.getPayload().id;\n  // console.log('currentUserId:', currentUserId);\n  // usersShow.Edit = false;\n\n  // wait until data has been returned from db to run function.\n  // User.get($state.params).$promise.then((data) => {\n  //   console.log(data);\n  //   usersShow.user = data;\n  //   allowUserToEdit();\n  // });\n\n  //prevent logged in user editing other users\n  // function allowUserToEdit() {\n    // console.log('user to edit:', usersShow.user.id);\n    // console.log('currentUser:', currentUserId);\n  //   if (usersShow.user.id === currentUserId) {\n  //     usersShow.Edit = true;\n  //     console.log('usersShow.user.id:',usersShow.user.id);\n  //   }\n  // }\n  //\n  // usersShow.allowUserToEdit = allowUserToEdit;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n// get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  console.log(isCurrentUser);\n\n  usersShow.user = User.get($state.params);\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n\n\n  // function unfavorite() {\n  //   usersShow.user.$unfavorite(() => {\n  //     $state.go('usersShow');\n  //   });\n  // }\n  //\n  // usersShow.unfavorite = unfavorite;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}