{"version":3,"sources":["js/app.js","controllers/auth.js","models/comment.js","controllers/comments.js","models/festival.js","controllers/festivals.js","controllers/main.js","js/router.js","controllers/searches.js","models/user.js","controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Comment","$resource","id","update","method","CommentsIndexController","commentsIndex","all","query","CommentsNewController","create","save","params","commentsNew","comment","userId","getPayload","festivalId","festivalsShow","festival","CommentsShowController","deleteComments","commentsShow","$remove","get","delete","CommentsEditController","Comments","commentsEdit","$update","Festival","FestivalsIndexController","festivalsIndex","FestivalsShowController","addComment","console","log","comments","push","commentToAdd","titleToAdd","dateToAdd","bodyToAdd","res","deleteFestival","add","FestivalsEditController","festivalsEdit","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","SearchesIndexController","Search","searchesIndex","SearchesShowController","searchesShow","search","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  // let userId = localStorage.setItem('userId');\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('CommentsIndexController', CommentsIndexController)\n  .controller('CommentsNewController', CommentsNewController)\n  .controller('CommentsShowController', CommentsShowController)\n  .controller('CommentsEditController', CommentsEditController);\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n\n  commentsIndex.all = Comment.query();\n}\n\nCommentsNewController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsNewController(Comment, $state, $auth) {\n  const commentsNew = this;\n\n\n  function create() {\n    Comment.save($state.params, () => {\n      commentsNew.comment.userId = $auth.getPayload().id;\n      commentsNew.comment.festivalId = festivalsShow.festival.id;\n\n      $state.go('commentsShow', $state.params);\n    });\n  }\n\n  commentsNew.create = create;\n}\n\n\nCommentsShowController.$inject = ['Comment', '$state'];\nfunction CommentsShowController(Comment, $state) {\n  const commentsShow = this;\n\n  commentsShow.comment = Comment.get($state.params);\n\n  function deleteComments() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n\n  commentsShow.delete = deleteComments;\n}\n\n\nCommentsEditController.$inject = ['Comments', '$state'];\nfunction CommentsEditController(Comments, $state) {\n  const commentsEdit = this;\n\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('Festival', Festival);\n\nFestival.$inject = ['$resource', 'API_URL'];\nfunction Festival($resource, API_URL) {\n  return new $resource(`${API_URL}/festivals/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('FestivalsIndexController', FestivalsIndexController)\n  .controller('FestivalsShowController', FestivalsShowController)\n  .controller('FestivalsEditController', FestivalsEditController);\n\n\nFestivalsIndexController.$inject = ['Festival'];\nfunction FestivalsIndexController(Festival) {\n  const festivalsIndex = this;\n\n  festivalsIndex.all = Festival.query();\n}\n\nFestivalsShowController.$inject = ['Festival', '$state'];\nfunction FestivalsShowController(Festival, $state) {\n  const festivalsShow = this;\n\n  festivalsShow.festival = Festival.get($state.params);\n\n  function addComment() {\n    console.log('this works');\n    festivalsShow.festival.comments.push(festivalsShow.commentToAdd);\n    festivalsShow.titleToAdd = '';\n    festivalsShow.dateToAdd = '';\n    festivalsShow.bodyToAdd = '';\n    festivalsShow.festival.$update((res) => {\n      return res;\n    });\n  }\n\n  festivalsShow.add = addComment;\n\n  function deleteFestival() {\n    festivalsShow.festival.$remove(() => {\n      $state.go('festivalsIndex');\n    });\n  }\n\n  festivalsShow.delete = deleteFestival;\n}\n\n\nFestivalsEditController.$inject = ['Festival', '$state'];\nfunction FestivalsEditController(Festival, $state) {\n  const festivalsEdit = this;\n\n  festivalsEdit.festival = Festival.get($state.params);\n\n  function update() {\n    festivalsEdit.festival.$update(() => {\n      $state.go('festivalsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  console.log('is auth?', main.isLoggedIn());\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  main.logout = logout;\n\n  main.message = null;\n  const protectedStates = ['usersEdit', 'usersNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('festivalsIndex', {\n      url: '/festivals',\n      templateUrl: '/templates/festivalsIndex.html',\n      controller: 'FestivalsIndexController as festivalsIndex'\n    })\n    .state('festivalsShow', {\n      url: '/festivals/:id',\n      templateUrl: '/templates/festivalsShow.html',\n      controller: 'FestivalsShowController as festivalsShow'\n    })\n    .state('festivalsEdit', {\n      url: '/festivals/:id/edit',\n      templateUrl: '/templates/festivalsEdit.html',\n      controller: 'FestivalsEditController as festivalsEdit'\n    })\n    .state('commentsIndex', {\n      url: '/comments',\n      templateUrl: '/templates/commentsIndex.html',\n      controller: 'CommentsIndexController as commentsIndex'\n    })\n    .state('commentsNew', {\n      url: '/comments/new',\n      templateUrl: '/templates/commentsNew.html',\n      controller: 'CommentsNewController as commentsNew'\n    })\n    .state('commentsShow', {\n      url: '/comments/:id',\n      templateUrl: '/templates/commentsShow.html',\n      controller: 'CommentsShowController as commentsShow'\n    })\n    .state('commentsEdit', {\n      url: '/comments/:id/edit',\n      templateUrl: '/templates/commentsEdit.html',\n      controller: 'CommentsEditController as commentsEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .controller('SearchesIndexController', SearchesIndexController)\n  .controller('SearchesShowController', SearchesShowController);\n\n\nSearchesIndexController.$inject = ['Search'];\nfunction SearchesIndexController(Search) {\n  const searchesIndex = this;\n\n  searchesIndex.all = Search.query();\n}\n\nSearchesShowController.$inject = ['Search', '$state'];\nfunction SearchesShowController(Search, $state) {\n  const searchesShow = this;\n\n  searchesShow.search = Search.get($state.params);\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state'];\nfunction UsersShowController(User, $state) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  \n  usersShow.delete = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}