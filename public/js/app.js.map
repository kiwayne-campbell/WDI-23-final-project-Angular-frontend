{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/comment.js","js/controllers/comments.js","js/models/festival.js","js/controllers/festivals.js","js/directives/googleMap.js","js/controllers/main.js","js/router.js","js/controllers/searches.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","currentUserId","getPayload","id","console","log","localStorage","setItem","Comment","$resource","update","method","CommentsIndexController","commentsIndex","all","query","CommentsShowController","deleteComments","commentsShow","comment","$remove","get","params","delete","CommentsEditController","Comments","commentsEdit","$update","Festival","favorite","url","FestivalsIndexController","festivalsIndex","q","FestivalsShowController","addComment","save","festivalsShow","reload","festival","$favorite","deleteFestival","festival_id","add","FestivalsEditController","festivalsEdit","googleMap","$window","restrict","replace","template","scope","center","link","$scope","element","google","maps","Map","zoom","MainController","$rootScope","logout","removeItem","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","userId","$on","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","SearchesIndexController","Search","searchesIndex","SearchesShowController","searchesShow","search","User","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","parseFloat","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        const currentUserId = $auth.getPayload().id;\n        console.log(currentUserId);\n        localStorage.setItem('currentUserId', currentUserId);\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('CommentsIndexController', CommentsIndexController)\n  .controller('CommentsShowController', CommentsShowController)\n  .controller('CommentsEditController', CommentsEditController);\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n\n  commentsIndex.all = Comment.query();\n}\n\n// CommentsNewController.$inject = ['Comment', '$state', '$auth'];\n// function CommentsNewController(Comment, $state, $auth) {\n//   const commentsNew = this;\n//\n//\n//   function create() {\n//     Comment.save($state.params, () => {\n//       commentsNew.comment.userId = $auth.getPayload().id;\n//       commentsNew.comment.festivalId = festivalsShow.festival.id;\n//\n//       $state.go('commentsShow', $state.params);\n//     });\n//   }\n//\n//   commentsNew.create = create;\n// }\n\n\nCommentsShowController.$inject = ['Comment', '$state'];\nfunction CommentsShowController(Comment, $state) {\n  const commentsShow = this;\n\n  commentsShow.comment = Comment.get($state.params);\n\n  function deleteComments() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n\n  commentsShow.delete = deleteComments;\n}\n\n\nCommentsEditController.$inject = ['Comments', '$state'];\nfunction CommentsEditController(Comments, $state) {\n  const commentsEdit = this;\n\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('Festival', Festival);\n\nFestival.$inject = ['$resource', 'API_URL'];\nfunction Festival($resource, API_URL) {\n  return new $resource(`${API_URL}/festivals/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    favorite: { method: 'POST', url: `${API_URL}/festivals/:id/favorite` }\n  });\n}\n","angular.module('finalProject')\n  .controller('FestivalsIndexController', FestivalsIndexController)\n  .controller('FestivalsShowController', FestivalsShowController)\n  .controller('FestivalsEditController', FestivalsEditController);\n\n\nFestivalsIndexController.$inject = ['Festival', '$state'];\nfunction FestivalsIndexController(Festival, $state) {\n  const festivalsIndex = this;\n  festivalsIndex.all = Festival.query({ q: $state.params.q });\n\n  // festivalsIndex.all = Festival.query();\n}\n\nFestivalsShowController.$inject = ['Festival', '$state', 'Comment'];\nfunction FestivalsShowController(Festival, $state, Comment) {\n  const festivalsShow = this;\n\n  festivalsShow.festival = Festival.get($state.params);\n\n  festivalsShow.comment = {\n    festival_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(festivalsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  festivalsShow.add = addComment;\n\n\n  function favorite() {\n    festivalsShow.festival.$favorite(() => {\n      $state.go('festivalsIndex');\n    });\n  }\n  // add main-message- added to favourites!\n\n  festivalsShow.favorite = favorite;\n\n\n  function deleteFestival() {\n    festivalsShow.festival.$remove(() => {\n      $state.go('festivalsIndex');\n    });\n  }\n\n  festivalsShow.delete = deleteFestival;\n}\n\n\nFestivalsEditController.$inject = ['Festival', '$state'];\nfunction FestivalsEditController(Festival, $state) {\n  const festivalsEdit = this;\n\n  festivalsEdit.festival = Festival.get($state.params);\n\n  function update() {\n    festivalsEdit.festival.$update(() => {\n      $state.go('festivalsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window', 'Festival'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google map here</div>',\n    scope: {\n      center: '='\n    },\n    link: function($scope, element) {\n      console.log($window.google);\n      console.log(element);\n      new $window.google.maps.Map(element[0], {\n        center: $scope.center,\n        zoom: 14\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  // $window.localStorage.setItem(currentUserId);\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.userId = $auth.getPayload().id;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        localStorage.removeItem('currentUserId');\n        $state.go('home');\n\n      });\n  }\n\n  main.logout = logout;\n\n  main.message = null;\n  const protectedStates = ['usersEdit', 'usersNew', 'usersShow'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('festivalsIndex', {\n      url: '/festivals?q',\n      templateUrl: '/templates/festivalsIndex.html',\n      controller: 'FestivalsIndexController as festivalsIndex'\n    })\n    .state('festivalsShow', {\n      url: '/festivals/:id',\n      templateUrl: '/templates/festivalsShow.html',\n      controller: 'FestivalsShowController as festivalsShow'\n    })\n    .state('festivalsEdit', {\n      url: '/festivals/:id/edit',\n      templateUrl: '/templates/festivalsEdit.html',\n      controller: 'FestivalsEditController as festivalsEdit'\n    })\n    .state('commentsIndex', {\n      url: '/comments',\n      templateUrl: '/templates/commentsIndex.html',\n      controller: 'CommentsIndexController as commentsIndex'\n    })\n    .state('commentsNew', {\n      url: '/comments/new',\n      templateUrl: '/templates/commentsNew.html',\n      controller: 'CommentsNewController as commentsNew'\n    })\n    .state('commentsShow', {\n      url: '/comments/:id',\n      templateUrl: '/templates/commentsShow.html',\n      controller: 'CommentsShowController as commentsShow'\n    })\n    .state('commentsEdit', {\n      url: '/comments/:id/edit',\n      templateUrl: '/templates/commentsEdit.html',\n      controller: 'CommentsEditController as commentsEdit'\n    })\n    .state('home', {\n      url: '/home',\n      templateUrl: '/templates/home.html',\n      controller: 'LoginController as login'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n\n  $urlRouterProvider.otherwise('/home');\n}\n","angular.module('finalProject')\n  .controller('SearchesIndexController', SearchesIndexController)\n  .controller('SearchesShowController', SearchesShowController);\n\n\nSearchesIndexController.$inject = ['Search'];\nfunction SearchesIndexController(Search) {\n  const searchesIndex = this;\n\n  searchesIndex.all = Search.query();\n}\n\nSearchesShowController.$inject = ['Search', '$state'];\nfunction SearchesShowController(Search, $state) {\n  const searchesShow = this;\n\n  searchesShow.search = Search.get($state.params);\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'Festival'];\nfunction UsersShowController(User, $state, $auth, Festival) {\n  const usersShow = this;\n\n  // const currentUserId = $auth.getPayload().id;\n  // console.log('currentUserId:', currentUserId);\n  // usersShow.Edit = false;\n\n  // wait until data has been returned from db to run function.\n  // User.get($state.params).$promise.then((data) => {\n  //   console.log(data);\n  //   usersShow.user = data;\n  //   allowUserToEdit();\n  // });\n\n  //prevent logged in user editing other users\n  // function allowUserToEdit() {\n    // console.log('user to edit:', usersShow.user.id);\n    // console.log('currentUser:', currentUserId);\n  //   if (usersShow.user.id === currentUserId) {\n  //     usersShow.Edit = true;\n  //     console.log('usersShow.user.id:',usersShow.user.id);\n  //   }\n  // }\n  //\n  // usersShow.allowUserToEdit = allowUserToEdit;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n// get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  console.log(isCurrentUser);\n\n  usersShow.user = User.get($state.params);\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}