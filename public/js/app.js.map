{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/comment.js","js/controllers/comments.js","js/models/festival.js","js/controllers/festivals.js","js/controllers/main.js","js/router.js","js/controllers/searches.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Comment","$resource","id","update","method","CommentsIndexController","commentsIndex","all","query","CommentsShowController","deleteComments","commentsShow","comment","$remove","get","params","delete","CommentsEditController","Comments","commentsEdit","$update","Festival","FestivalsIndexController","festivalsIndex","FestivalsShowController","User","addComment","save","festivalsShow","reload","addFestival","festival","UserFavouriteArray","deleteFestival","festival_id","add","FestivalsEditController","festivalsEdit","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","console","log","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","SearchesIndexController","Search","searchesIndex","SearchesShowController","searchesShow","search","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","getPayload","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  // let userId = localStorage.setItem('userId');\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('CommentsIndexController', CommentsIndexController)\n  .controller('CommentsShowController', CommentsShowController)\n  .controller('CommentsEditController', CommentsEditController);\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n\n  commentsIndex.all = Comment.query();\n}\n\n// CommentsNewController.$inject = ['Comment', '$state', '$auth'];\n// function CommentsNewController(Comment, $state, $auth) {\n//   const commentsNew = this;\n//\n//\n//   function create() {\n//     Comment.save($state.params, () => {\n//       commentsNew.comment.userId = $auth.getPayload().id;\n//       commentsNew.comment.festivalId = festivalsShow.festival.id;\n//\n//       $state.go('commentsShow', $state.params);\n//     });\n//   }\n//\n//   commentsNew.create = create;\n// }\n\n\nCommentsShowController.$inject = ['Comment', '$state'];\nfunction CommentsShowController(Comment, $state) {\n  const commentsShow = this;\n\n  commentsShow.comment = Comment.get($state.params);\n\n  function deleteComments() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n\n  commentsShow.delete = deleteComments;\n}\n\n\nCommentsEditController.$inject = ['Comments', '$state'];\nfunction CommentsEditController(Comments, $state) {\n  const commentsEdit = this;\n\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('Festival', Festival);\n\nFestival.$inject = ['$resource', 'API_URL'];\nfunction Festival($resource, API_URL) {\n  return new $resource(`${API_URL}/festivals/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('FestivalsIndexController', FestivalsIndexController)\n  .controller('FestivalsShowController', FestivalsShowController)\n  .controller('FestivalsEditController', FestivalsEditController);\n\n\nFestivalsIndexController.$inject = ['Festival'];\nfunction FestivalsIndexController(Festival) {\n  const festivalsIndex = this;\n\n  festivalsIndex.all = Festival.query();\n}\n\nFestivalsShowController.$inject = ['Festival', '$state', 'Comment', 'User'];\nfunction FestivalsShowController(Festival, $state, Comment, User) {\n  const festivalsShow = this;\n\n  festivalsShow.festival = Festival.get($state.params);\n\n  festivalsShow.comment = {\n    festival_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(festivalsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n  festivalsShow.add = addComment;\n\n\n  function addFestival() {\n    festivalsShow.festival.UserFavouriteArray = [];\n\n    User.save(festivalsShow.festival, () => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  festivalsShow.addFestival = addFestival;\n\n\n  function deleteFestival() {\n    festivalsShow.festival.$remove(() => {\n      $state.go('festivalsIndex');\n    });\n  }\n\n  festivalsShow.delete = deleteFestival;\n}\n\n\nFestivalsEditController.$inject = ['Festival', '$state'];\nfunction FestivalsEditController(Festival, $state) {\n  const festivalsEdit = this;\n\n  festivalsEdit.festival = Festival.get($state.params);\n\n  function update() {\n    festivalsEdit.festival.$update(() => {\n      $state.go('festivalsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  console.log('is auth?', main.isLoggedIn());\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  main.logout = logout;\n\n  main.message = null;\n  const protectedStates = ['usersEdit', 'usersNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('festivalsIndex', {\n      url: '/festivals',\n      templateUrl: '/templates/festivalsIndex.html',\n      controller: 'FestivalsIndexController as festivalsIndex'\n    })\n    .state('festivalsShow', {\n      url: '/festivals/:id',\n      templateUrl: '/templates/festivalsShow.html',\n      controller: 'FestivalsShowController as festivalsShow'\n    })\n    .state('festivalsEdit', {\n      url: '/festivals/:id/edit',\n      templateUrl: '/templates/festivalsEdit.html',\n      controller: 'FestivalsEditController as festivalsEdit'\n    })\n    .state('commentsIndex', {\n      url: '/comments',\n      templateUrl: '/templates/commentsIndex.html',\n      controller: 'CommentsIndexController as commentsIndex'\n    })\n    .state('commentsNew', {\n      url: '/comments/new',\n      templateUrl: '/templates/commentsNew.html',\n      controller: 'CommentsNewController as commentsNew'\n    })\n    .state('commentsShow', {\n      url: '/comments/:id',\n      templateUrl: '/templates/commentsShow.html',\n      controller: 'CommentsShowController as commentsShow'\n    })\n    .state('commentsEdit', {\n      url: '/comments/:id/edit',\n      templateUrl: '/templates/commentsEdit.html',\n      controller: 'CommentsEditController as commentsEdit'\n    })\n    .state('home', {\n      url: '/home',\n      templateUrl: '/templates/home.html',\n      controller: 'LoginController as login'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n\n  $urlRouterProvider.otherwise('/festivals');\n}\n","angular.module('finalProject')\n  .controller('SearchesIndexController', SearchesIndexController)\n  .controller('SearchesShowController', SearchesShowController);\n\n\nSearchesIndexController.$inject = ['Search'];\nfunction SearchesIndexController(Search) {\n  const searchesIndex = this;\n\n  searchesIndex.all = Search.query();\n}\n\nSearchesShowController.$inject = ['Search', '$state'];\nfunction SearchesShowController(Search, $state) {\n  const searchesShow = this;\n\n  searchesShow.search = Search.get($state.params);\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'Festival'];\nfunction UsersShowController(User, $state, $auth, Festival) {\n  const usersShow = this;\n\n  // const currentUserId = $auth.getPayload().id;\n  // console.log('currentUserId:', currentUserId);\n  // usersShow.Edit = false;\n\n  // wait until data has been returned from db to run function.\n  // User.get($state.params).$promise.then((data) => {\n  //   console.log(data);\n  //   usersShow.user = data;\n  //   allowUserToEdit();\n  // });\n\n  //prevent logged in user editing other users\n  // function allowUserToEdit() {\n    // console.log('user to edit:', usersShow.user.id);\n    // console.log('currentUser:', currentUserId);\n  //   if (usersShow.user.id === currentUserId) {\n  //     usersShow.Edit = true;\n  //     console.log('usersShow.user.id:',usersShow.user.id);\n  //   }\n  // }\n  //\n  // usersShow.allowUserToEdit = allowUserToEdit;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === $state.params.id;\n  }\n\n// get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  console.log(isCurrentUser);\n\n  usersShow.user = User.get($state.params);\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}